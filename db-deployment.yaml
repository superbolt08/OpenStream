apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.yaml
    kompose.version: 1.28.0 (c4137012e)
  creationTimestamp: null
  labels:
    io.kompose.service: db
  name: db
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: db
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yaml
        kompose.version: 1.28.0 (c4137012e)
      creationTimestamp: null
      labels:
        io.kompose.network/openstream-default: "true"
        io.kompose.service: db
    spec:
      containers:
        - args:
            - --replSet
            - rs0
            - --bind_ip_all
          env:
            - name: DATABASE_URL
              valueFrom:
                configMapKeyRef:
                  key: DATABASE_URL
                  name: env-development
            - name: DB_PORT
              valueFrom:
                configMapKeyRef:
                  key: DB_PORT
                  name: env-development
            - name: ME_CONFIG_BASICAUTH
              valueFrom:
                configMapKeyRef:
                  key: ME_CONFIG_BASICAUTH
                  name: env-development
            - name: ME_CONFIG_MONGODB_ADMINPASSWORD
              valueFrom:
                configMapKeyRef:
                  key: ME_CONFIG_MONGODB_ADMINPASSWORD
                  name: env-development
            - name: ME_CONFIG_MONGODB_ADMINUSERNAME
              valueFrom:
                configMapKeyRef:
                  key: ME_CONFIG_MONGODB_ADMINUSERNAME
                  name: env-development
            - name: ME_CONFIG_MONGODB_REPLICA_SET
              valueFrom:
                configMapKeyRef:
                  key: ME_CONFIG_MONGODB_REPLICA_SET
                  name: env-development
            - name: ME_CONFIG_MONGODB_URL
              valueFrom:
                configMapKeyRef:
                  key: ME_CONFIG_MONGODB_URL
                  name: env-development
            - name: MONGO_DB
              valueFrom:
                configMapKeyRef:
                  key: MONGO_DB
                  name: env-development
            - name: MONGO_EXPRESS_PORT
              valueFrom:
                configMapKeyRef:
                  key: MONGO_EXPRESS_PORT
                  name: env-development
            - name: MONGO_HOST
              valueFrom:
                configMapKeyRef:
                  key: MONGO_HOST
                  name: env-development
            - name: MONGO_INITDB_ROOT_PASSWORD
              valueFrom:
                configMapKeyRef:
                  key: MONGO_INITDB_ROOT_PASSWORD
                  name: env-development
            - name: MONGO_INITDB_ROOT_USERNAME
              valueFrom:
                configMapKeyRef:
                  key: MONGO_INITDB_ROOT_USERNAME
                  name: env-development
            - name: NODE_ENV
              valueFrom:
                configMapKeyRef:
                  key: NODE_ENV
                  name: env-development
            - name: SERVER_PORT
              valueFrom:
                configMapKeyRef:
                  key: SERVER_PORT
                  name: env-development
            - name: SOCKET_PORT
              valueFrom:
                configMapKeyRef:
                  key: SOCKET_PORT
                  name: env-development
          image: mongo
          livenessProbe:
            exec:
              command:
                - echo "try { rs.status() } catch (err) { rs.initiate() }" | mongosh --port ${DB_PORT} --quiet
            failureThreshold: 30
            periodSeconds: 5
            timeoutSeconds: 30
          name: app-db
          ports:
            - containerPort: 27017
          resources: {}
          volumeMounts:
            - mountPath: /data/db
              name: db-data
            - mountPath: /data/configdb
              name: db-config
      restartPolicy: Always
      volumes:
        - name: db-data
          persistentVolumeClaim:
            claimName: db-data
        - name: db-config
          persistentVolumeClaim:
            claimName: db-config
status: {}
