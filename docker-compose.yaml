services:
  server:
    build: 
      context: .
      dockerfile: Dockerfile
      args: 
        NODE_ENV: ${NODE_ENV}
    container_name: server
    restart: always
    command: >
      sh -c "
        npm run prisma:generate && 
        npm run db:push &&
        npm run dev
      "
    env_file: .env.development
    ports:
      - "${SERVER_PORT}:${SERVER_PORT}"
    volumes:
      - .:/server
      - /server/node_modules
    depends_on:
      db:
        condition: service_healthy
      websocket:
        condition: service_healthy

  mongo-express:
    image: mongo-express
    container_name: mongo_express
    env_file: .env.development
    ports:
      - "${MONGO_EXPRESS_PORT}:${MONGO_EXPRESS_PORT}"
    depends_on:
      db:
        condition: service_healthy

  websocket:
    container_name: websocket
    build:
      context: ./websocket
      dockerfile: Dockerfile
    environment:
      NODE_ENV: ${NODE_ENV}
    ports:
      - "${SOCKET_PORT}:${SOCKET_PORT}"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${SOCKET_PORT}/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - /websocket/node_modules
      - ./websocket:/websocket

  db:
    image: mongo
    container_name: app-db
    command: ["--replSet", "rs0", "--bind_ip_all"]
    env_file: .env.development
    ports:
      - "${DB_PORT}:${DB_PORT}"
    restart: always
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate() }" | mongosh --port ${DB_PORT} --quiet
      interval: 5s
      timeout: 30s
      start_period: 0s
      start_interval: 1s
      retries: 30
    volumes:
      - db-data:/data/db
      - db-config:/data/configdb

volumes:
  db-data:
  db-config:
