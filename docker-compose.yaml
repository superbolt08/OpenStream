services:
  app_server:
    build: 
      context: .
      dockerfile: Dockerfile
      args: 
        NODE_ENV: ${NODE_ENV}
    container_name: app_server
    restart: always
    command: >
      sh -c "
        npm run prisma:generate && 
        npm run db:push &&
        npm run dev
      "
    env_file: .env.development
    ports:
      - "${MAIN_SERVER_PORT}:${MAIN_SERVER_PORT}"
    volumes:
      - .:/app_server
      - /app_server/node_modules
    depends_on:
      mongo-db:
        condition: service_healthy
      websocket:
        condition: service_healthy

  mongo-express:
    image: mongo-express
    container_name: mongo_express
    env_file: .env.development
    ports:
      - "${MONGO_EXPRESS_PORT}:${MONGO_EXPRESS_PORT}"
    depends_on:
      mongo-db:
        condition: service_healthy

  websocket:
    container_name: websocket
    build:
      context: ./websocket
      dockerfile: Dockerfile
    environment:
      NODE_ENV: ${NODE_ENV}
    ports:
      - "${WEBSOCKET_SERVER_PORT}:${WEBSOCKET_SERVER_PORT}"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${WEBSOCKET_SERVER_PORT}/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - /websocket/node_modules
      - ./websocket:/websocket

  mongo-db:
    image: mongo
    container_name: mongo_db
    command: ["--replSet", "rs0", "--bind_ip_all"]
    env_file: .env.development
    ports:
      - "${DB_PORT}:${DB_PORT}"
    restart: always
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate() }" | mongosh --port ${DB_PORT} --quiet
      interval: 5s
      timeout: 30s
      start_period: 0s
      start_interval: 1s
      retries: 30
    volumes:
      - mongo-db-data:/data/db
      - mongo-db-config:/data/configdb

  antmedia:
    build: 
      context: ./antmedia
      dockerfile: Dockerfile
      args:
        AntMediaServer: "ant-media-server.zip"
    container_name: antmedia
    ports:
      - "${HLS_BROADCAST_PORT}:${HLS_BROADCAST_PORT}"   # HLS streaming
      - "${RTMP_SERVER_PORT}:${RTMP_SERVER_PORT}"   # RTMP ingest
      - "${WEB_SERVER_PORT}:${WEB_SERVER_PORT}"   #webRTC
    volumes:
      - antmedia-webapps:/usr/local/antmedia/webapps
      - antmedia-conf:/usr/local/antmedia/conf
      - antmedia-logs:/usr/local/antmedia/log
      - antmedia-plugins:/usr/local/antmedia/plugins         # For custom plugins
      - antmedia-data:/usr/local/antmedia/data               # For recording & stream data
      - antmedia-streams:/usr/local/antmedia/streams         # For HLS/DASH streams
    healthcheck:
      test: curl --fail http://${RTMP_SERVER_HOST}:${HLS_BROADCAST_PORT} || exit 1
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    entrypoint: /usr/local/antmedia/start.sh

  stream-server:
    container_name: stream_server
    build:
      context: ./stream_server
      dockerfile: Dockerfile
    env_file: .env.development
    environment:
      NODE_ENV: ${NODE_ENV}
    ports:
      - "${STREAM_PORT}:${STREAM_PORT}"
    restart: always
    volumes:
      - /stream_server/node_modules
      - ./stream_server:/stream_server

volumes:
  mongo-db-data:
  mongo-db-config:
  antmedia-webapps:
  antmedia-conf:
  antmedia-logs:
  antmedia-plugins:
  antmedia-data:
  antmedia-streams:
